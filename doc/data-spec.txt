                     TorBEL Export Data Format Specifications

Author: Harry Bock
Created: 26-May-2010
Status: Draft

0. Scope

  This document describes the data formats available for export from the
  Tor Bulk Exit List (TorBEL) suite.

  This document is a work-in-progress and the data format may change quickly
  during the summer in response to demand and implementation problems.

1. Exported Data

1.1. Records

  The basic unit of data in all formats is the router record.  Each
  record is unique based on their (RouterID, ExitAddress) tuple, as
  will be described in section 1.4.

1.2. Record Fields

  Each router record contains a number of fields, whose values and
  significance to data consumers are described below.

  The following data are crucial to consumers of the bulk exit node list,
  with a brief rationale as to why they need this data:

    * ExitAddress: IP address from which traffic actually exits.
                   This may differ from what is advertised in the node's
                   descriptor, likely due to router misconfiguration.
    * LastTestedTimestamp: Date and time when TorBEL last completed testing
                           this node's exit policy.  Precision is to the second.
                           If a node is not yet tested, a default value will be
                           used to indicate this in a manner specific to each
                           export format, documented below.
    * ExitPolicy: Exit policy as advertised by the node.
    * WorkingPorts: A list of ports that are tested by TorBEL and were
                    found to be reachable through the Tor network using
                    this router as an exit node.
    * FailedPorts: A list of ports that were not reachable by TorBEL, either
                   due to its exit policy or a temporary failure, when it
		   was last tested.
  
  The following data are supplied for convenience to the consumer:

    * RouterID: Advertised ID of the router.  Allows the consumer to
                discover more information about the router with a given
		ExitAddress.
    * Nickname: Advertised nickname of the router.
    * InConsensus: A boolean value indicating that this node is in the
                   current consensus advertised by the Tor directory
		   authorities.  TorBEL often receives information about
		   new routers before they are voted on in the consensus.
                   If the router is not yet in the consensus, the consumer
                   may not be able to use the RouterID field to discover
                   more information pertaining to the node.

1.3. Active testing

  WorkingPorts and FailedPorts are determined by TorBEL using the
  active testing mechanisms outlined in the TorBEL test-spec, section
  1.2. ExitAddress is determined by TorBEL using the active testing
  mechanisms described in test-spec section 1.3.

  The union of the WorkingPorts and FailedPorts sets is the set of all
  ports tested by TorBEL for a particular router.  If a port does not
  appear in either set, it was not tested for that router.

1.4. Router entry uniqueness concerns

  ExitAddress and RouterID are not guaranteed to be unique.  Rationale:
    1. Router operators can run multiple exits on the same IP address with
       different exit policies.  In this case, ExitAddress will not be unique.
    2. Router operators may exit to a different port than their ORPort.
       Operators may also exit different ports to different IP addresses,
       using iptables or custom policy routing.  Thus an IP address may
       differ for the same RouterID.

  In these cases exported data will contain multiple records with the same
  ExitAddress or RouterID. Consumers of this data MUST handle these non-unique
  row cases.

1.5. Export file distribution

1.5.1. Export status file

  TorBEL will always make available an export status file with the extension
  ".status" to inform consumers about available exports and updates.

  The status file consists of key-value pairs, one per line, optionally with
  blank lines in between data.  Each key-value line is of the form

    Key "Value1" "Value2" ... "ValueN"

  Where Value1 .. ValueN are double-quoted strings.

  Supported keys are:

   * NextUpdate "Datetime":
     The value of this key is a date-time string with strftime(3) format
     "%b %d %Y %H:%M:%S".  This date represents the absolute earliest time at
     which a TorBEL export consumer should attempt to fetch an updated export
     file.
     An example of this key is:
       NextUpdate "Aug 12 16:51:04"
     This key must appear exactly once in the status file.

   * ExportFile "Filename":
     The value of this key is a string representing an export filename.
     This filename must represent a valid, current, fetchable export file
     in any of the formats listed below.
     This key may appear multiple times in the status file, once for each
     export file available.  This key must appear at least once in the
     status file.

   * UpdateFile "UpdateFilename" "OriginalFilename":
     The value UpdateFilename of this key corresponds to a file
     suitable to update the *last* export of OriginalFilename.  If a
     consumer has a copy of the last OriginalFilename export, it may
     download UpdateFilename instead to save bandwidth and update
     time.
     This key may appear multiple times, once for each update file available.
     This key is optional and does not have to appear if updates are not
     available for a particular export type.

2. Supported Data Formats

2.1. CSV

  The simplest bulk output format supported by TorBEL is CSV (comma-separated 
  values).  Since CSV is not a standard and many fragmented versions exist, 
  we standardize on the format as written and understood by Microsoft Excel[1].

  The Microsoft Excel CSV dialect used has the following properties:
    * Fields within a data row are delimited by commas.
    * Data rows are delimited by CRLF ('\r\n').
    * Fields containing the above delimiters are escaped by embedding the field
      inside a set of double quotes. For example, a single field with the text 
        [80, 443, 8080]
      becomes "[80, 443, 8080]".
    * The double quote is escaped by writing two consecutive double quotes. 
      Thus "test """ is interpreted as the text:
        test "
      Fields that contain an escaped double quote are also enclosed in a set
      of double quotes.

  The fields of each row are, in order:

    ExitAddress, RouterID, Nickname, LastTestedTimestamp, InConsensus,
      ExitPolicy, WorkingPorts, FailedPorts

  Formats for specific fields are:

    * ExitAddress: IPv4 or IPv6 address in raw integer format.
    * RouterID: Hex string.
    * LastTestedTimestamp: Integer time in UNIX-epoch format. Timestamp 0 indicates
                           that the router has not been tested.
    * InConsensus: "True" or "False".
    * ExitPolicy: Semicolon-separated list of ExitPolicy lines.
    * Working/FailedPorts: List of ports, comma-separated and surrounded by square 
                           brackets. The list elements MAY be separated by spaces.

  This data may be exported in raw or gzipped format.

  An example BEL CSV row:

3507770467,0379F36CD0881B0133AE6D712F9C98F3AE58F7EF,severin,1275018370,True,reject 0.0.0.0/255.0.0.0:0-65535;reject 169.254.0.0/255.255.0.0:0-65535;reject 127.0.0.0/255.0.0.0:0-65535;reject 192.168.0.0/255.255.0.0:0-65535;reject 10.0.0.0/255.0.0.0:0-65535;reject 172.16.0.0/255.240.0.0:0-65535;reject 209.20.84.99/255.255.255.255:0-65535;accept 0.0.0.0/0.0.0.0:80-80;accept 0.0.0.0/0.0.0.0:443-443;reject 0.0.0.0/0.0.0.0:0-65535;,"[53, 443, 8080]","[80, 6667]"

2.2 JSON
  
  A more complex but widely supported bulk output format is JSON
  (JavaScript Object Notation), whose syntax is defined by RFC 4627 and at
  http://json.org/.  Many programming languages have JSON support built-in and
  its data format is more flexible than CSV.

  Consumers of TorBEL's JSON exports must be able to accept Unicode JSON.

  The JSON record format is a JSON object with value names corresponding
  exactly to the record field names defined in section 1.2 of this document.

  Formats for field values are:

   * ExitAddress, RouterID, Nickname, LastTestedTimestamp exactly correspond to
     the field formats defined for CSV in section 2.1.
   * InConsensus: JSON boolean (true or false).
   * ExitPolicy: Array of ExitPolicy lines as strings.
   * WorkingPorts: Array of numbers.
   * FailedPorts: Array of numbers.

  Bulk exports are given as an array of router records as defined above.

2.3 DNSEL

  TorBEL suite provides a DNSEL-compatible DNS authoritative server
  that implements the Tor DNSEL query type 1, along with an additional
  type.  These queries are specified originally in the
  torel-design.txt document, found in [2].  The specification for
  query type 1 is based on this design document.

  In all examples below, torhosts.example.com references the zone
  domain that is handled by the DNSEL implementation.

  Queries given to the DNSEL must be in the following format:
    {Query}.{QueryType}.torhosts.example.com.
  Valid {QueryType}s and their respective {Query} formats are
  specified below.

  The TTL of each record returned by a DNSEL implementation should
  be honored to ensure greater accuracy in using cached results.

2.3.1 DNSEL Query Type 1 - General IP:Port
  {QueryType} = ip-port

  Format:
    {IP1}.{port}.{IP2}.ip-port.torhosts.example.com

  If {IP1} is an active Tor router that permits connections to {port}
  on {IP2}, then DNSEL will return an A record with the value
  127.0.0.2.

  If more information about the router is available, it MAY be
  returned in CNAME records in the ADDITIONAL section of the answer.
  One CNAME record will be returned for each key-value pair for
  information related to the queried router, and the record payload
  will be a string in the following format:

    key=value

  ADDITIONAL records available are:
   * id=<Identity key hash>      (40 characters, hexadecimal represention)
   * nickname=<Router nickname from descriptor>

  ADDITIONAL records are an extension to the original DNSEL
  specifications.

2.3.2 DNSEL Query Type 3 - My IP, with port
  {QueryType} = me

  Format:
    {IP}.{port}.me.torhosts.example.com

  If {IP} is an active Tor router that permits connections to {port}
  on the IP address that asked the question, then DNSEL will return an
  A record with the value 127.0.0.2.

  If more information about the router is available, it MAY be
  returned in CNAME records as per 2.3.1.

2.3.3 DNSEL Query Type 4 - Target IP:Port Router List
  {QueryType} = ip-port-list

  This query type is not specified in [2], and is an extension unique
  to TorBEL's specification and implementation of DNSEL.

  Format:
    {TargetPort}.{TargetIP}.ip-port-list.torhosts.example.com

  If any active routers permit exit connections to {TargetIP} on
  {TargetPort}, DNSEL will return the IP addresses of all such
  routers, with one A record per router.  The payload of each A record
  will contain the IP address from which such connections may
  originate.

  The response may be very large for a particular destination and port
  combination, and it may take a large amount of time (on the order of
  several hundred milliseconds) for a DNSEL implementation to complete
  and send its answer.  It is recommended that consumers of this query
  cache the result.

2.4. Update files

  TODO: Update files are not yet specified.
  
3. References

[1] PEP 305 -- CSV File API -- http://www.python.org/dev/peps/pep-0305/
[2] Design For A Tor DNS-based Exit List --
    https://gitweb.torproject.org/tor.git?a=blob_plain;hb=HEAD;f=doc/contrib/torel-design.txt
